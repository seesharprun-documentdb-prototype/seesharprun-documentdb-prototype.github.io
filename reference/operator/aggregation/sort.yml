type: operator
category: aggregation
name: $sort
description: |-
  The `$sort` stage in the aggregation pipeline is used to order the documents in the pipeline by a specified field or fields. This stage helps you sort data, like arranging sales by amount or events by date.
syntax: |-
  {
    $sort: {
      <field1>: <sort order>,
      <field2>: <sort order>
    }
  }
parameters:
  - name: field
    type: string
    required: true
    description: |-
      The field to sort by.
  - name: sort order
    type: number
    required: true
    description: |-
      The order in which to sort the field. 1 for ascending order and -1 for descending order.
examples:
  sample: |-
    {
      "_id": "0fcc0bf0-ed18-4ab8-b558-9848e18058f4",
      "name": "First Up Consultants | Beverage Shop",
      "sales": {
        "totalSales": 75670,
        "salesByCategory": [
          { "categoryName": "Wine Accessories", "totalSales": 34440 },
          { "categoryName": "Bitters", "totalSales": 39496 }
        ]
      }
    }
  items:
    - title: Sorting by total sales in descending order
      explanation: |-
        Sort sales categories by their total sales in descending order.
      description: |-
        This query unwinds the salesByCategory array and sorts by totalSales.
      query: |-
        db.collection.aggregate([
          {
            $unwind: "$store.sales.salesByCategory"
          },
          {
            $sort: { "store.sales.salesByCategory.totalSales": -1 }
          }
        ])
      output:
        value: |-
          [
            {
              "_id": "7954bd5c-9ac2-4c10-bb7a-2b79bd0963c5",
              "store": {
                "name": "Downtown Store",
                "sales": {
                  "salesByCategory": [
                    { "category": "Electronics", "totalSales": 15000 },
                    { "category": "Clothing", "totalSales": 12000 }
                  ]
                }
              }
            }
          ]
    - title: Sorting by event start date in ascending order
      explanation: |-
        Sort promotion events by their start dates in ascending order.
      description: |-
        This query unwinds events and sorts by the startDate field.
      query: |-
        db.collection.aggregate([
          { $unwind: "$store.promotionEvents" },
          { $sort: { "store.promotionEvents.promotionalDates.startDate": 1 } }
        ])
      output:
        value: |-
          [
            {
              "_id": "7954bd5c-9ac2-4c10-bb7a-2b79bd0963c5",
              "store": {
                "name": "Downtown Store",
                "promotionEvents": [
                  { "eventName": "Summer Sale", "promotionalDates": { "startDate": "2024-06-01T00:00:00Z" } }
                ]
              }
            }
          ]
related:
  - reference: /operator/aggregation/group
  - reference: /operator/aggregation/match

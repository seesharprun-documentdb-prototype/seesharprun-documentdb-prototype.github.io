type: operator
category: aggregation
name: $unwind
description: |-
  The `$unwind` stage in the aggregation framework is used to deconstruct an array field from the input documents to output a document for each element. This is particularly useful for normalizing data stored in arrays and for performing operations on each element separately.
syntax: |-
  {
    $unwind: {
      path: <field path>,
      includeArrayIndex: <string>,
      preserveNullAndEmptyArrays: <boolean>
    }
  }
parameters:
  - name: path
    type: string
    required: true
    description: |-
      The field path to an array field. This is a required parameter.
  - name: includeArrayIndex
    type: string
    required: false
    description: |-
      Optional. The name of a new field to hold the array index of the unwound element.
  - name: preserveNullAndEmptyArrays
    type: string
    required: false
    description: |-
      Optional. If true, if the path is null, missing, or an empty array, $unwind outputs the document unchanged.
examples:
  sample: |-
    {
      "_id": "0fcc0bf0-ed18-4ab8-b558-9848e18058f4",
      "name": "First Up Consultants | Beverage Shop",
      "sales": {
        "salesByCategory": [
          { "categoryName": "Wine Accessories", "totalSales": 34440 },
          { "categoryName": "Bitters", "totalSales": 39496 }
        ]
      }
    }
  items:
    - title: Unwind sales by category
      explanation: |-
        Deconstruct the salesByCategory array in the store document.
      description: |-
        This query creates one document for each element in the salesByCategory array.
      query: |-
        db.stores.aggregate([
          {
            $unwind: "$sales.salesByCategory"
          }
        ])
      output:
        value: |-
          [
            {
              "_id": "7954bd5c-9ac2-4c10-bb7a-2b79bd0963c5",
              "store": {
                "name": "Downtown Store",
                "sales": {
                  "totalSales": 15000,
                  "salesByCategory": { "category": "Electronics", "totalSales": 5000 }
                }
              }
            }
          ]
    - title: Unwind promotion events with array index
      explanation: |-
        Deconstruct the promotionEvents array and include the array index in the output.
      description: |-
        This query uses includeArrayIndex to track the position of each event.
      query: |-
        db.stores.aggregate([
          {
            $unwind: {
              path: "$promotionEvents",
              includeArrayIndex: "eventIndex"
            }
          }
        ])
      output:
        value: |-
          [
            {
              "_id": "7954bd5c-9ac2-4c10-bb7a-2b79bd0963c5",
              "store": {
                "name": "Downtown Store",
                "promotionEvents": { "eventName": "Summer Sale" },
                "eventIndex": 0
              }
            }
          ]
related:
  - reference: /operator/aggregation/group
  - reference: /operator/aggregation/match

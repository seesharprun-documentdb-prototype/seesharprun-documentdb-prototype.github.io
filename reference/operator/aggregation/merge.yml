type: operator
category: aggregation
name: $merge
description: |-
  The `$merge` stage in an aggregation pipeline is used to write the results of the aggregation query into a specified collection. This stage combines data transformation and data persistence in a single operation.
syntax: |-
  {
    $merge: {
      into: <collection>,
      on: <field or fields>,
      whenMatched: <action>,
      whenNotMatched: <action>
    }
  }
parameters:
  - name: into
    type: string
    required: true
    description: |-
      Specifies the target collection where the aggregation results will be written.
  - name: on
    type: string
    required: false
    description: |-
      Specifies the field(s) to identify matching documents in the target collection.
  - name: whenMatched
    type: string
    required: false
    description: |-
      Action when a matching document is found. Options: merge, replace, keepExisting, fail, or a custom pipeline.
  - name: whenNotMatched
    type: string
    required: false
    description: |-
      Action when no matching document is found. Options: insert or discard.
examples:
  sample: |-
    {
      "_id": "7954bd5c-9ac2-4c10-bb7a-2b79bd0963c5",
      "name": "Lakeshore Retail | DJ Equipment Stop",
      "sales": {
        "salesByCategory": [
          { "categoryName": "DJ Headphones", "totalSales": 35921 }
        ]
      }
    }
  items:
    - title: Merge data into a collection
      explanation: |-
        Aggregate documents and write results to salesSummary, updating existing documents or inserting new ones.
      description: |-
        This query groups by category and merges results into a summary collection.
      query: |-
        db.sales.aggregate([
          {
            $group: {
              _id: "$sales.salesByCategory.categoryName",
              totalSales: { $sum: "$sales.salesByCategory.totalSales" }
            }
          },
          {
            $merge: {
              into: "salesSummary",
              on: "_id",
              whenMatched: "merge",
              whenNotMatched: "insert"
            }
          }
        ])
      output:
        value: |-
          Documents merged into 'salesSummary' collection.
    - title: Replace documents in the target collection
      explanation: |-
        Replace documents in the promotionEventsSummary collection based on the _id field.
      description: |-
        This query projects event data and replaces matching documents in target collection.
      query: |-
        db.promotionEvents.aggregate([
          {
            $project: {
              _id: "$eventName",
              startDate: "$promotionalDates.startDate",
              totalDiscounts: { $size: "$discounts" }
            }
          },
          {
            $merge: {
              into: "promotionEventsSummary",
              on: "_id",
              whenMatched: "replace",
              whenNotMatched: "insert"
            }
          }
        ])
      output:
        value: |-
          Documents replaced in 'promotionEventsSummary' collection.
related:
  - reference: /operator/aggregation/out
  - reference: /operator/aggregation/group

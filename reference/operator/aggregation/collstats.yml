type: operator
category: aggregation
name: $collStats
description: |-
  The `$collStats` stage in the aggregation pipeline is used to return statistics about a collection. This stage provides detailed information that can help with database optimization and monitoring.
syntax: |-
  {
    $collStats: {
      latencyStats: { histograms: <boolean> },
      storageStats: { scale: <number> },
      count: {}
    }
  }
parameters:
  - name: latencyStats
    type: object
    required: false
    description: |-
      Optional. Specifies whether to include latency statistics. The histograms field indicates whether to include histograms of latency data.
  - name: storageStats
    type: object
    required: false
    description: |-
      Optional. Specifies whether to include storage statistics. The scale field is a number that indicates the scale factor.
  - name: count
    type: object
    required: false
    description: |-
      Optional. Includes the count of documents in the collection.
examples:
  sample: |-
    {
      "_id": "0fcc0bf0-ed18-4ab8-b558-9848e18058f4",
      "name": "First Up Consultants | Beverage Shop",
      "sales": { "totalSales": 75670 }
    }
  items:
    - title: Get collection statistics
      explanation: |-
        Return statistics about the stores collection including storage and count information.
      description: |-
        This query retrieves comprehensive collection statistics.
      query: |-
        db.stores.aggregate([
          {
            $collStats: {
              storageStats: { scale: 1 },
              count: {}
            }
          }
        ])
      output:
        value: |-
          [
            {
              "ns": "database.stores",
              "count": 45505,
              "storageStats": {
                "size": 123456789,
                "count": 45505
              }
            }
          ]
related:
  - reference: /operator/aggregation/indexstats
  - reference: /operator/aggregation/count

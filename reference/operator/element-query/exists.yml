type: operator
category: element-query
name: $exists
description: Matches documents where the specified field exists, regardless of its value.
syntax: '{ <field>: { $exists: <boolean> } }'
parameters:
  - name: field
    type: string
    required: true
    description: The field name to check for existence
  - name: boolean
    type: string
    required: true
    description: 'true to match documents where field exists, false to match documents where field does not exist'
examples:
  items:
    - title: Find documents where price field exists
      description: Find all products that have a price field defined
      query: 'db.products.find({ "price": { $exists: true } })'
      output:
        value: Documents where the price field is present, regardless of its value
    - title: Find documents without description field
      description: Find products that don't have a description field
      query: 'db.products.find({ "description": { $exists: false } })'
      output:
        value: Documents where the description field is not present
    - title: Check nested field existence
      description: Check if a nested field within an object exists
      query: 'db.stores.find({ "location.coordinates": { $exists: true } })'
      output:
        value: Documents where the coordinates field exists within the location object
    - title: Find documents with array field
      description: Match documents where an array field exists
      query: 'db.stores.find({ "tags": { $exists: true } })'
      output:
        value: Documents that have a tags array field, even if it's empty
    - title: Combine with other operators
      description: Use $exists with other query operators
      query: 'db.products.find({ "price": { $exists: true, $gt: 50 } })'
      output:
        value: Documents where price field exists and is greater than 50
related:
  - reference: /reference/operator/type
  - reference: /docs/query-operators/field
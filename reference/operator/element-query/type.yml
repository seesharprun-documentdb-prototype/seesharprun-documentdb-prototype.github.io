type: operator
category: element-query
name: $type
description: Matches documents where the specified field is of the specified BSON type.
syntax: '{ <field>: { $type: <BSON type> } }'
parameters:
  - name: field
    type: string
    required: true
    description: The field name to check the type of
  - name: BSON type
    type: string
    required: true
    description: 'BSON type number (1-19) or string alias: "double", "string", "object", "array", "binData", "objectId", "bool", "date", "null", "regex", "int", "timestamp", "long", "decimal"'
examples:
  items:
    - title: Find string fields
      description: Match documents where name field is a string
      query: 'db.products.find({ "name": { $type: "string" } })'
      output:
        value: Documents where the name field contains string values
    - title: Find numeric fields using type number
      description: Match documents where price field is a double (type 1)
      query: 'db.products.find({ "price": { $type: 1 } })'
      output:
        value: Documents where the price field contains double/float values
    - title: Find array fields
      description: Match documents where tags field is an array
      query: 'db.products.find({ "tags": { $type: "array" } })'
      output:
        value: Documents where the tags field is an array type
    - title: Find date fields
      description: Match documents where createdDate field is a date
      query: 'db.stores.find({ "createdDate": { $type: "date" } })'
      output:
        value: Documents where createdDate field contains date values
    - title: Multiple type matching
      description: Match documents where field can be one of multiple types
      query: 'db.products.find({ "price": { $type: ["int", "double", "long"] } })'
      output:
        value: Documents where price field is any numeric type
    - title: Check nested field types
      description: Verify type of nested object fields
      query: 'db.stores.find({ "location.lat": { $type: "double" } })'
      output:
        value: Documents where latitude field is a double within location object
related:
  - reference: /reference/operator/exists
  - reference: /docs/data-validation
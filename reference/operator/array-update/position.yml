type: operator
category: array-update
name: $position
description: |-
  The `$position` operator is used to specify the position in the array where a new element should be inserted. This operator is useful when you need to insert an element at a specific index in an array rather than appending it to the end.
syntax: |-
  {
    $push: {
      <arrayField>: {
        $each: [<value1>, <value2>],
        $position: <index>
      }
    }
  }
parameters:
  - name: <arrayField>
    type: string
    required: true
    description: |-
      The field in the document that contains the array to be updated.
  - name: <value1>, <value2>, ...
    type: string
    required: true
    description: |-
      The values to be inserted into the array.
  - name: <index>
    type: number
    required: true
    description: |-
      The position at which the values should be inserted.
examples:
  sample: |-
    {
      "_id": "7954bd5c-9ac2-4c10-bb7a-2b79bd0963c5",
      "name": "Store Name",
      "tag": [
        "#ShopLocal",
        "#FashionStore",
        "#SeasonalSale",
        "#FreeShipping",
        "#MembershipDeals"
      ]
    }
  items:
    - title: Insert an element at specific index location in an array field
      description: |-
        Inserts the tag #NewArrival at the second position (index 1) in the tag array.
      query: |-
        db.stores.update({
          _id: "7954bd5c-9ac2-4c10-bb7a-2b79bd0963c5"
        }, {
          $push: {
            tag: {
              $each: ["#NewArrival"],
              $position: 1
            }
          }
        })
      output:
        value: |-
          {
            "_id": "7954bd5c-9ac2-4c10-bb7a-2b79bd0963c5",
            "tag": [
              "#ShopLocal",
              "#NewArrival",
              "#FashionStore",
              "#SeasonalSale",
              "#FreeShipping",
              "#MembershipDeals"
            ]
          }
related:
  - reference: /operator/array-update/push
  - reference: /operator/array-update/each

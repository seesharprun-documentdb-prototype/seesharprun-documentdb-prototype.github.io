type: operator
category: geospatial
name: $polygon
description: Defines a polygon for geospatial queries, allowing you to find locations within an irregular shape, useful for querying locations within complex geographical boundaries.
syntax: '{ <location field>: { $geoWithin: { $geometry: { type: "Polygon", coordinates: [[[<longitude1>, <latitude1>], ..., [<longitude1>, <latitude1>]]] } } } }'
parameters:
  - name: location field
    type: string
    required: true
    description: The field containing the geospatial data
  - name: coordinates
    type: object
    required: true
    description: Array of coordinate pairs forming the polygon, with first and last points identical to close the polygon
examples:
  items:
    - title: Search within polygon boundary
      description: Find stores that fall inside a custom polygon region
      query: 'db.stores.find({ location: { $geoWithin: { $geometry: { type: "Polygon", coordinates: [[[-141.9922, 16.8331], [-112.7858, -29.1866], [-38.4071, -47.2548], [-141.9922, 16.8331]]] } } } })'
      output:
        value: Stores located within the irregular polygon boundary
    - title: Polygon query with field selection
      description: Find stores within polygon and return only specific fields
      query: 'db.stores.find({ location: { $geoWithin: { $geometry: { type: "Polygon", coordinates: [[[-141.9922, 16.8331], [-112.7858, -29.1866], [-38.4071, -47.2548], [-141.9922, 16.8331]]] } } } }, { name: 1, location: 1 })'
      output:
        value: Name and location of stores within the polygon area
related:
  - reference: /reference/operator/geowithin
  - reference: /reference/operator/geometry
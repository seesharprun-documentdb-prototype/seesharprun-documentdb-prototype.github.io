type: operator
category: timestamp-expression
name: $tsSecond
description: Extracts the seconds portion from a timestamp value, returning the time component in seconds since Unix epoch (January 1, 1970, 00:00:00 UTC).
syntax: '{ $tsSecond: <expression> }'
parameters:
  - name: expression
    type: object
    required: true
    description: Expression that evaluates to a timestamp, returns error if not a timestamp
examples:
  items:
    - title: Extract seconds from audit timestamp
      description: Get seconds value from last updated timestamp in audit log
      query: 'db.stores.aggregate([{ $match: {"_id": "2cf3f885-9962-4b67-a172-aa9039e9ae2f"} }, { $project: { name: 1, lastUpdatedSeconds: { $tsSecond: "$lastUpdated" }, lastUpdatedDate: { $toDate: { $multiply: [{ $tsSecond: "$lastUpdated" }, 1000] } } } }])'
      output:
        value: Document with seconds value and converted date from timestamp
    - title: Convert timestamp to readable date
      description: Extract seconds and convert to standard date format
      query: 'db.events.aggregate([{ $project: { eventName: 1, timestampSeconds: { $tsSecond: "$eventTime" }, readableDate: { $dateToString: { format: "%Y-%m-%d %H:%M:%S", date: { $toDate: { $multiply: [{ $tsSecond: "$eventTime" }, 1000] } } } } } }])'
      output:
        value: Documents with both timestamp seconds and human-readable date formats
related:
  - reference: /reference/operator/tsincrement
type: operator
category: window
name: $covarianceSamp
description: Calculates the sample covariance of two numerical expressions within a specified document window, providing unbiased covariance estimate for statistical analysis.
syntax: '{ $covarianceSamp: [<numericalExpression1>, <numericalExpression2>] }'
parameters:
  - name: numericalExpression1
    type: object
    required: true
    description: First numerical expression for sample covariance calculation within the document window
  - name: numericalExpression2
    type: object
    required: true
    description: Second numerical expression for sample covariance calculation within the document window
examples:
  items:
    - title: Calculate sample covariance between unbounded and current document
      description: Compute sample covariance for stores partitioned by company with date sorting
      query: 'db.stores.aggregate([{ $match: { "company": { $in: ["First Up Consultants"] }, "$and": [{ "storeOpeningDate": { "$gt": ISODate("2024-09-01T03:06:24.180Z") } }, { "storeOpeningDate": { "$lt": ISODate("2025-09-30T03:55:17.557Z") } }] } }, { $setWindowFields: { "partitionBy": "$company", "sortBy": { "storeOpeningDate": 1 }, "output": { "covarianceSampForSales": { "$covarianceSamp": [{ "$hour": "$storeOpeningDate" }, "$sales.revenue"], "window": { "documents": ["unbounded", "current"] } } } } }])'
      output:
        value: Documents with sample covariance between opening hour and sales revenue
    - title: Revenue and cost covariance
      description: Calculate sample covariance between revenue and cost metrics
      query: 'db.financial.aggregate([{ $setWindowFields: { "partitionBy": "$department", "sortBy": { "month": 1 }, "output": { "revenueCostCovariance": { "$covarianceSamp": ["$revenue", "$cost"] } } } }])'
      output:
        value: Financial documents with sample covariance between revenue and cost
related:
  - reference: /reference/operator/covariancepop
type: operator
category: set-expression
name: $setUnion
description: Returns an array containing all distinct elements from the input arrays, performing set union operation to combine arrays without duplicates.
syntax: '{ $setUnion: [<array_expression1>, <array_expression2>, ...] }'
parameters:
  - name: array_expressions
    type: object
    required: true
    description: Two or more array expressions to combine into union set
examples:
  items:
    - title: Combine arrays
      description: Create union of two arrays with distinct elements
      query: 'db.products.aggregate([{ $project: { allTags: { $setUnion: ["$productTags", "$categoryTags"] } } }])'
      output:
        value: Documents with allTags containing distinct elements from both tag arrays
    - title: Multiple array union
      description: Combine multiple arrays into single distinct set
      query: 'db.analysis.aggregate([{ $project: { combinedFeatures: { $setUnion: ["$featuresA", "$featuresB", "$featuresC"] } } }])'
      output:
        value: Documents with combinedFeatures containing all distinct elements from three arrays
    - title: Merge user permissions
      description: Combine different permission sets into comprehensive list
      query: 'db.users.aggregate([{ $project: { totalPermissions: { $setUnion: ["$rolePermissions", "$additionalPermissions"] } } }])'
      output:
        value: Documents with totalPermissions containing all distinct permissions from both sources
related:
  - reference: /reference/operator/setintersection
  - reference: /reference/operator/setdifference
type: operator
category: set-expression
name: $setIsSubset
description: Returns true if all elements of the first array are contained in the second array, performing subset validation regardless of element order.
syntax: '{ $setIsSubset: [<array_expression1>, <array_expression2>] }'
parameters:
  - name: array_expression1
    type: object
    required: true
    description: The array expression to check as potential subset
  - name: array_expression2
    type: object
    required: true
    description: The array expression to check as potential superset
examples:
  items:
    - title: Check subset relationship
      description: Verify if first array is completely contained in second array
      query: 'db.products.aggregate([{ $project: { isValidSubset: { $setIsSubset: ["$selectedFeatures", "$availableFeatures"] } } }])'
      output:
        value: Documents with isValidSubset boolean indicating subset relationship
    - title: Validate user permissions
      description: Check if user's requested permissions are subset of available permissions
      query: 'db.users.aggregate([{ $project: { permissionsValid: { $setIsSubset: ["$requestedPermissions", "$availablePermissions"] } } }])'
      output:
        value: Documents with permissionsValid showing if requested permissions are allowed
    - title: Order validation
      description: Check if ordered items are subset of inventory items
      query: 'db.orders.aggregate([{ $project: { itemsAvailable: { $setIsSubset: ["$orderedItems", "$inventoryItems"] } } }])'
      output:
        value: Documents with itemsAvailable indicating if all ordered items are in inventory
related:
  - reference: /reference/operator/setequals
  - reference: /reference/operator/setintersection